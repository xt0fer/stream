// template pages

{
	default: default
	map: map
	reverse: reverse
} := import('std')
{
	padStart: padStart
	join: join
} := import('str')
{
	format: format
} := import('fmt')
datetime := import('datetime')
md := import('md')

config := import('config')

fn date(t) {
	d := datetime.describe(t)
	'<a class="datestamp" href="/on/{{0}}/{{1}}/{{2}}" title="Updates on this date">{{0}}/{{1}}/{{2}}</a>
	<a class="clockstamp" href="/updates/{{5}}" title="Permalink to this update">{{3}}:{{4}}</a>' |> format(
		d.year
		d.month
		d.day
		d.hour
		d.minute |> string() |> padStart(2, '0')
		t
	)
}

fn feedURL(page, count, query) {
	params := []
	if page != 1 {
		true -> params << 'p=' + string(page)
	}
	if count != config.PageSize {
		true -> params << 'n=' + string(count)
	}
	if query != ? {
		true -> params << 'q=' + string(query)
	}
	if params {
		[] -> '/'
		_ -> '/?' << params |> join('&')
	}
}

fn update(u) '<div class="update">
	<div class="update-t" data-timestamp="{{0}}">{{1}}</div>
	<div class="update-s">{{2}}</div>
</div>' |> format(
	u.t
	u.t |> date()
	md.transform(u.s)
)

fn feed(updates) if updates {
	[] -> '<div class="feed">
		<div class="message">No updates.</div>
	</div>'
	_ -> '<div class="feed">{{0}}</div>' |>
		format(updates |> reverse() |> map(update) |> join())
}

fn message(s) '<div class="message">{{0}}</div>' |> format(s)

fn content(updates, last?, next?, page, count, query) '
{{0}}
<div class="pageControls">{{1}}{{2}}</div>
' |> format(
	feed(updates)
	if last? {
		true -> '<a class="pageButton" href="{{0}}" title="Previous page">&larr;</a>' |> format(
			feedURL(page - 1, count, query)
		)
		_ -> ''
	}
	if next? {
		true -> '<a class="pageButton" href="{{0}}" title="Next page">&rarr;</a>' |> format(
			feedURL(page + 1, count, query)
		)
		_ -> ''
	}
)

fn author '<form class="author" action="/author/updates" method="post">
	<textarea type="text" name="s"
		placeholder="What are you thinking?"
		required autofocus></textarea>
	<button type="submit">Send</button>
</form>
<form class="delete" action="/author/delete" method="post">
	<input type="text" name="t" placeholder="123456789" required>
	<button type="submit">Delete</button>
</form>'

fn about '<div class="about">
	<p>Welcome to my <em>stream</em>. Here, you can expect to find a constant
	stream of updates about what I\'m working on or thinking about, especially
	around my current interests of creative knowledge tools, software, and
	writing.</p>
	<p>You can think of this website like a less noisy, mini Twitter feed I\'ve
	created just for myself and my updates on my work and thinking. It\'s a
	micro-blog in the truest sense of the word.</p>
	<p><em>Why don\'t you just use Twitter, then?</em> I hear you asking. I
	could, but there are a few problems with Twitter. First, Twitter is
	extremely noisy.  There\'s a million other people vying for your attention
	next to what I have to say. Twitter is also quite limiting, not just in the
	character count, but also in that they only let you write in plain text,
	without any formatting unless you resort to ugly Unicode hacks. Lastly,
	Twitter is great for "in the moment" discussion in public, but it\'s not so
	great as a reference you can link to from the future, and as a historical
	record of my thinking and work. I wanted a place more purpose-built, more
	focused, and more permanent for my less permanent thoughts and updates.</p>
	<p><em>The stream</em> is also the first real application I built with my
	<a href="https://oaklang.org/">Oak programming language</a>, so building it
	served as a good testbed and excuse for exercising the language in a real
	use case and patching in some of the initial bugs and rough edges. At
	launch, The stream is quite small —&nbsp;only about 500 well-commented
	lines of Oak code. That seems about right: It\'s complex enough to be a
	good test for a fledgling language, but simple enough not to overwhelm
	it.</p>
	<p>The stream is free and open source <a
	href="https://github.com/thesephist/stream">on GitHub</a>, if you want to
	check out how it works. But there isn\'t much to it —&nbsp;all the data
	lives in a single <a href="https://jsonlines.org/">JSONL</a> file, and
	there\'s a light view and model layer on top.</p>
</div>'

fn search(searchQuery) '<form class="search" action="/" method="get">
	<input type="text" name="q"
		placeholder="Search the stream..."
		value="{{0}}"
		required autofocus />
</form>' |> format(
	searchQuery |> default('')
)

fn page(body, title, searchQuery) '<!doctype html>
<head>
	<meta charset="utf-8">
	<title>{{0}}</title>
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<link rel="stylesheet" href="/s/css/main.css">
</head>
<body>
	<header>
		<a href="/" class="logo">the stream</a>
		<nav>
			<a href="/about/">about</a>
		</nav>
	</header>
	{{1}}
	<main>
		{{2}}
	</main>
	<footer>
	</footer>
	<script>
	function currentlyPrefersDark() {
		const savedScheme = window.localStorage.getItem(\'colorscheme\');
		if (savedScheme != null) {
			return savedScheme === \'dark\';
		}
		return window.matchMedia && window.matchMedia(\'(prefers-color-scheme: dark)\').matches;
	}
	function updateScheme() {
		if (currentlyPrefersDark()) {
			document.body.classList.add(\'dark\');
			document.body.classList.remove(\'light\')
		} else {
			document.body.classList.add(\'light\')
			document.body.classList.remove(\'dark\');
		}
	}
	updateScheme();
	</script>
	<script src="/s/js/main.js"></script>
</body>' |> format(
	if title {
		?, '' -> 'the stream'
		_ -> title + ' | the stream'
	}
	if title {
		? -> '<h1>Kristofer\'s stream</h1>'
		'' -> ''
		_ -> '<h1>' << title << '</h1>'
	}
	body
)

